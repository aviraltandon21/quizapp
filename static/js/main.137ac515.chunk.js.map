{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","App.js","index.js"],"names":["table","sports","history","politics","general","computers","science","mathematics","mythology","geography","his","celebrities","books","films","anime","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","amount","category","difficulty","quiz","setQuiz","isModalOpen","setIsModalOpen","fetchQuestions","url","a","axios","catch","err","console","log","response","data","results","length","nextQuestion","oldIndex","openModal","Provider","value","checkAnswer","oldState","closeModal","handleChange","e","name","target","handleSubmit","preventDefault","useGlobalContext","useContext","SetupForm","className","htmlFor","type","id","onChange","min","max","onClick","Loading","Modal","toFixed","App","question","incorrect_answers","correct_answer","answers","tempIndex","Math","floor","random","push","dangerouslySetInnerHTML","__html","map","answer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.137ac515.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, { useState, useContext, useEffect } from 'react'\r\n\r\nconst table = {\r\n  sports: 21,\r\n  history: 23,\r\n  politics: 24,\r\n  general: 9,\r\n  computers: 18,\r\n  science: 17,\r\n  mathematics: 19,\r\n  mythology: 20,\r\n  geography: 22,\r\n  his: 23,\r\n  celebrities: 26,\r\n  books: 10,\r\n  films: 11,\r\n  anime: 31\r\n}\r\n\r\nconst API_ENDPOINT = 'https://opentdb.com/api.php?'\r\n\r\nconst url = ''\r\nconst tempUrl =\r\n  'https://opentdb.com/api.php?amount=5&category=21&difficulty=easy&type=multiple'\r\nconst AppContext = React.createContext()\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [waiting, setWaiting] = useState(true)\r\n  const [loading, setLoading] = useState(false)\r\n  const [questions, setQuestions] = useState([])\r\n  const [index, setIndex] = useState(0)\r\n  const [correct, setCorrect] = useState(0)\r\n  const [error, setError] = useState(false)\r\n  const [quiz, setQuiz] = useState({\r\n    amount: 5,\r\n    category: 'sports',\r\n    difficulty: 'easy',\r\n  })\r\n  const [isModalOpen, setIsModalOpen] = useState(false)\r\n\r\n  const fetchQuestions = async (url) => {\r\n    setLoading(true)\r\n    setWaiting(false)\r\n    const response = await axios(url).catch((err) => console.log(err))\r\n    if (response) {\r\n      const data = response.data.results\r\n      if (data.length > 0) {\r\n        setQuestions(data)\r\n        setLoading(false)\r\n        setWaiting(false)\r\n        setError(false)\r\n      } else {\r\n        setWaiting(true)\r\n        setError(true)\r\n      }\r\n    } else {\r\n      setWaiting(true)\r\n    }\r\n  }\r\n\r\n  const nextQuestion = () => {\r\n    setIndex((oldIndex) => {\r\n      const index = oldIndex + 1\r\n      if (index > questions.length - 1) {\r\n        openModal()\r\n        return 0\r\n      } else {\r\n        return index\r\n      }\r\n    })\r\n  }\r\n  const checkAnswer = (value) => {\r\n    if (value) {\r\n      setCorrect((oldState) => oldState + 1)\r\n    }\r\n    nextQuestion()\r\n  }\r\n\r\n  const openModal = () => {\r\n    setIsModalOpen(true)\r\n  }\r\n  const closeModal = () => {\r\n    setWaiting(true)\r\n    setCorrect(0)\r\n    setIsModalOpen(false)\r\n  }\r\n  const handleChange = (e) => {\r\n    const name = e.target.name\r\n    const value = e.target.value\r\n    setQuiz({ ...quiz, [name]: value })\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const { amount, category, difficulty } = quiz\r\n\r\n    const url = `${API_ENDPOINT}amount=${amount}&difficulty=${difficulty}&category=${table[category]}&type=multiple`\r\n    fetchQuestions(url)\r\n  }\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        waiting,\r\n        loading,\r\n        questions,\r\n        index,\r\n        correct,\r\n        error,\r\n        isModalOpen,\r\n        nextQuestion,\r\n        checkAnswer,\r\n        closeModal,\r\n        quiz,\r\n        handleChange,\r\n        handleSubmit,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext)\r\n}\r\n\r\nexport { AppContext, AppProvider }","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\n\r\nconst SetupForm = () => {\r\n  const { quiz, handleChange, handleSubmit, error } = useGlobalContext()\r\n  return (\r\n    <main>\r\n      <section className='quiz quiz-small'>\r\n        <form className='setup-form'>\r\n          <h2>setup quiz</h2>\r\n          {}\r\n          <div className='form-control'>\r\n            <label htmlFor='amount'>number of questions</label>\r\n            <input\r\n              type='number'\r\n              name='amount'\r\n              id='amount'\r\n              value={quiz.amount}\r\n              onChange={handleChange}\r\n              className='form-input'\r\n              min={1}\r\n              max={50}\r\n            />\r\n          </div>\r\n          {}\r\n\r\n          <div className='form-control'>\r\n            <label htmlFor='category'>category</label>\r\n            <select\r\n              name='category'\r\n              id='category'\r\n              className='form-input'\r\n              value={quiz.category}\r\n              onChange={handleChange}\r\n            >\r\n              <option value='sports'>Sports</option>\r\n              <option value='history'>History</option>\r\n              <option value='general'>General Knowledge</option>\r\n              <option value='computers'>Computers</option>\r\n              <option value='science'>Science and Nature</option>\r\n              <option value='mathematics'>Mathematics</option>\r\n              <option value='mythology'>Mythology</option>\r\n              <option value='geography'>Geography</option>\r\n              <option value='his'>History</option>\r\n              <option value='celebrities'>Celebrities</option>\r\n              <option value='books'>Books</option>\r\n              <option value='films'>Films</option>\r\n              <option value='anime'>Anime and Manga</option>\r\n            </select>\r\n          </div>\r\n          {}\r\n\r\n          <div className='form-control'>\r\n            <label htmlFor='difficulty'>select difficulty</label>\r\n            <select\r\n              name='difficulty'\r\n              id='difficulty'\r\n              className='form-input'\r\n              value={quiz.difficulty}\r\n              onChange={handleChange}\r\n            >\r\n              <option value='easy'>easy</option>\r\n              <option value='medium'>medium</option>\r\n              <option value='hard'>hard</option>\r\n            </select>\r\n          </div>\r\n          {error && (\r\n            <p className='error'>\r\n              can't generate questions, please try different options\r\n            </p>\r\n          )}\r\n          <button type='submit' onClick={handleSubmit} className='submit-btn'>\r\n            start\r\n          </button>\r\n        </form>\r\n      </section>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default SetupForm","import React from 'react'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <main>\r\n      <div className='loading'></div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Loading","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\n\r\nconst Modal = () => {\r\n  const { isModalOpen, closeModal, correct, questions } = useGlobalContext()\r\n  return (\r\n    <div\r\n      className={`${\r\n        isModalOpen ? 'modal-container isOpen' : 'modal-container'\r\n      }`}\r\n    >\r\n      <div className='modal-content'>\r\n        <h2>congrats!</h2>\r\n        <p>\r\n          You answered {((correct / questions.length) * 100).toFixed(0)}% of\r\n          questions correctly\r\n        </p>\r\n        <button className='close-btn' onClick={closeModal}>\r\n          play again\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal","import React from 'react'\nimport { useGlobalContext } from './context'\n\nimport SetupForm from './SetupForm'\nimport Loading from './Loading'\nimport Modal from './Modal'\nfunction App() {\n  const {\n    waiting,\n    loading,\n    questions,\n    index,\n    correct,\n    nextQuestion,\n    checkAnswer,\n  } = useGlobalContext()\n  if (waiting) {\n    return <SetupForm />\n  }\n  if (loading) {\n    return <Loading />\n  }\n\n  const { question, incorrect_answers, correct_answer } = questions[index]\n  \n  let answers = [...incorrect_answers]\n  const tempIndex = Math.floor(Math.random() * 4)\n  if (tempIndex === 3) {\n    answers.push(correct_answer)\n  } else {\n    answers.push(answers[tempIndex])\n    answers[tempIndex] = correct_answer\n  }\n  return (\n    <main>\n      <Modal />\n      <section className='quiz'>\n        <p className='correct-answers'>\n          correct answers : {correct}/{index}\n        </p>\n        <article className='container'>\n          <h2 dangerouslySetInnerHTML={{ __html: question }} />\n          <div className='btn-container'>\n            {answers.map((answer, index) => {\n              return (\n                <button\n                  key={index}\n                  className='answer-btn'\n                  onClick={() => checkAnswer(correct_answer === answer)}\n                  dangerouslySetInnerHTML={{ __html: answer }}\n                />\n              )\n            })}\n          </div>\n        </article>\n        <button className='next-question' onClick={nextQuestion}>\n          next question\n        </button>\n      </section>\n    </main>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)"],"sourceRoot":""}